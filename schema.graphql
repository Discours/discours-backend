scalar DateTime

################################### Payload

type Result {
  error: String
}

type AuthResult {
  error: String
  token: String
  user: User
}

type UserResult {
  error: String
  user: User
}

type MessageResult {
  error: String
  message: Message
}

input ShoutInput {
  slug: String!
  body: String!
  replyTo: String # another shout
  tags: [String] # actual values
  topics: [Int]
  title: String
  subtitle: String
  versionOf: String
  visibleForRoles: [String] # role ids are strings
  visibleForUsers: [Int]
}

input ProfileInput {
  email: String
  username: String
  userpic: String
}

type ShoutResult {
  error: String
  shout: Shout
}

################################### Mutation

type Mutation {
  # message
  createMessage(body: String!, replyTo: Int): MessageResult!
  updateMessage(id: Int!, body: String!): MessageResult!
  deleteMessage(messageId: Int!): Result!

  # auth
  confirmEmail(token: String!): AuthResult!
  requestPasswordReset(email: String!): Boolean!
  confirmPasswordReset(token: String!): Boolean!
  registerUser(email: String!, password: String): AuthResult!
  # updatePassword(password: String!, token: String!): Token!
  # invalidateAllTokens: Boolean!
  # invalidateTokenById(id: Int!): Boolean!
  # requestEmailConfirmation: User!

  # shout
  createShout(input: ShoutInput!): ShoutResult!
  updateShout(id: Int!, input: ShoutInput!): ShoutResult!
  deleteShout(id: Int!): Result!
  rateShout(id: Int!, value: Int!): Result!

  # user profile
  # rateUser(value: Int!): Result!
  # updateOnlineStatus: Result!
  updateProfile(profile: ProfileInput!): Result!
}

################################### Query

type Query {
  # auth
  isEmailFree(email: String!): Result!
  signIn(email: String!, password: String): AuthResult!
  signOut: Result!
  # user profile
  getCurrentUser: UserResult!
  getUserById(id: Int!): UserResult!
  # getUserRating(shout: Int): Int!

  # messages
  getMessages(count: Int = 100, page: Int = 1): [Message!]!

  # shouts
  # getShoutRating(shout: Int): Int!
  # shoutsByAuthor(author: Int): [Shout]!
  # shoutsByReplyTo(shout: Int): [Shout]!
  # shoutsByTags(tags: [String]): [Shout]!
  # shoutsByTime(time: DateTime): [Shout]!

  topShoutsByView(limit: Int): [Shout]!
  topShoutsByRating(limit: Int): [Shout]!
  favoritesShouts(limit: Int): [Shout]!
  topAuthors(limit: Int): [User]!

  # getOnlineUsers: [User!]!
}

############################################ Subscription

type Subscription {
  messageCreated: Message!
  messageUpdated: Message!
  messageDeleted: Message!

  onlineUpdated: [User!]!
  shoutUpdated: Shout!
  userUpdated: User!
}

############################################ Entities

type Role {
  id: Int!
  name: String!
  community: Int!
  desc: String
  permissions: [Int!]!
}

type Rating {
  createdBy: Int!
  value: Int!
}

type Notification {
  kind: String! # unique primary key
  template: String!
  variables: [String]
}

type UserNotification {
  id: Int! # primary key
  user: Int!
  kind: String! # NotificationTemplate.name
  values: [String]
}

type User {
  id: Int!
  username: String! # email
  createdAt: DateTime!
  slug: String!
  viewname: String # to display
  email: String
  password: String
  oauth: String # provider:token
  userpic: String
  links: [String]
  emailConfirmed: Boolean # should contain all emails too # TODO: pagination here
  muted: Boolean
  roles: [Role]
  updatedAt: DateTime
  wasOnlineAt: DateTime
  rating: Int
  ratings: [Rating]
  bio: String
  notifications: [Int]
  topics: [String] # user subscribed topics
  communities: [Int] # user participating communities
}

type Message {
  author: Int!
  body: String!
  createdAt: DateTime!
  id: Int!
  replyTo: Int
  updatedAt: DateTime!
  visibleForUsers: [Int]!
}

type Comment {
  id: Int!
  author: Int!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  shout: Int!
  deletedAt: DateTime
  deletedBy: Int
  rating: Int
  ratigns: [Rating]
  views: Int
  old_id: String
}

# is publication
type Shout {
  id: Int!
  authors: [Int!]!
  slug: String!
  body: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  community: Int
  cover: String
  layout: String
  deletedAt: DateTime
  deletedBy: Int
  rating: Int
  ratigns: [Rating]
  published: Boolean!
  publishedAt: DateTime # if there is no published field - it is not published
  replyTo: Int # another shout
  tags: [String] # actual values
  topics: [String] # topic-slugs, order has matter
  title: String
  subtitle: String
  versionOf: String
  visibleForRoles: [String] # role ids are strings
  visibleForUsers: [Int]
  views: Int
  old_id: String
}

type Community {
  slug: String!
  name: String!
  desc: String
  pic: String!
}

type Topic {
  slug: String! # ID
  createdBy: Int! # User
  createdAt: DateTime!
  value: String
  desc: String
  parents: [String] # NOTE: topic can have parent topics
  children: [String] # and children
}

# TODO: resolvers to add/remove topics from publication

type Proposal {
  body: String!
  shout: Int!
  range: String # full / 0:2340
  author: Int!
  createdAt: DateTime!
}

type Token {
  createdAt: DateTime!
  expiresAt: DateTime
  id: Int!
  ownerId: Int!
  usedAt: DateTime
  value: String!
}
